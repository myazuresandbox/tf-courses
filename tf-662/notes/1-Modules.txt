Introduction
Before starting this course, please go through the Terraform Constructs course. Now, it is time to learn about Terraform in depth
Here is the list of topics that will be covered .
Terraform Module
Inheriting variable between modules
Terraform workspace
Remote backends
Passing values from modules
Maintaining multiple environments
Configuring multiple providers

Modules
In Terraform Constructs course, you have learned about a module and its uses.
Let's refresh some of the important points you would be familiar by now.
A module is like a reusable blueprint of infrastructure.
Module syntax:
module "child"
{
source = "../child"
}
The name of the module should be unique within the configurations because it is used as a reference to the module and outputs.
terraform get - Command used to download and install the modules for that configuration.
terraform get - update - Checks the downloaded modules and checks for the recent versions if any.

Inheriting Variables
You would be familiar with calling the child module from the parent module covered in Terraform Constructs course. It is time, you learn about how to pass the variables in modules.
Inheriting the variables between modules keeps your Terraform code DRY.
What is DRY by the way? Follow on.

DRY
Don't Repeat Yourself (DRY)
It aims at reducing repeating patterns and code.
There is no need to write the duplicate code for each environment you are deploying.
You can write the minimum code and achieve the goal by having maximum reusability.

File Structure
You will follow the below file structure to inherit the variables between modules.

          modules
         |
         |___mod
         |    |__mod.tf
         |
         |___vnet
              |__vnet.tf
          |__vars.tf
                                                          
There is one vnet and you can configure the vnet by passing the parameters from module.
The variables in the vnet are overriden by the values provided in mod.tf file.

Creating vnet.tf
Create a folder with name Modules

Create two subfolders of names vnet and mod in the nested_modules folder.
In the vnet folder, create a virtual network using Terraform configuration. Maintain two files one for main configuration(main.tf) and other for declaring variables(vars.tf)
Now, create main.tf file like this
resource "azurerm_virtual_network" "vnet"
{
name = "${var.name}"
address_space = ["10.0.0.0/16"]
resource_group_name = "${var.resourcegroup}"
location = "${var.location}"
}